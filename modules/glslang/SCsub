#!/usr/bin/env python
import glob
import os

Import("env")
Import("env_modules")

env_glslang = env_modules.Clone()

def get_cpp_files(directory):
    print(os.getcwd())
    ret = []

    for file in os.listdir("../../thirdparty/glslang/" + directory):
        filename = os.fsdecode(file)
        if filename.endswith(".cpp"):
            ret += [filename]
    return ret

# Thirdparty source files

thirdparty_obj = []

if env["builtin_glslang"]:
    thirdparty_dir = "#thirdparty/glslang/"
    thirdparty_sources = [
        "glslang/GenericCodeGen/CodeGen.cpp",
        "glslang/GenericCodeGen/Link.cpp",
        "glslang/MachineIndependent/attribute.cpp",
        "glslang/MachineIndependent/Constant.cpp",
        "glslang/MachineIndependent/glslang_tab.cpp",
        "glslang/MachineIndependent/InfoSink.cpp",
        "glslang/MachineIndependent/Initialize.cpp",
        "glslang/MachineIndependent/Intermediate.cpp",
        "glslang/MachineIndependent/intermOut.cpp",
        "glslang/MachineIndependent/IntermTraverse.cpp",
        "glslang/MachineIndependent/iomapper.cpp",
        "glslang/MachineIndependent/limits.cpp",
        "glslang/MachineIndependent/linkValidate.cpp",
        "glslang/MachineIndependent/parseConst.cpp",
        "glslang/MachineIndependent/ParseContextBase.cpp",
        "glslang/MachineIndependent/ParseHelper.cpp",
        "glslang/MachineIndependent/PoolAlloc.cpp",
        "glslang/MachineIndependent/preprocessor/PpAtom.cpp",
        "glslang/MachineIndependent/preprocessor/PpContext.cpp",
        "glslang/MachineIndependent/preprocessor/Pp.cpp",
        "glslang/MachineIndependent/preprocessor/PpScanner.cpp",
        "glslang/MachineIndependent/preprocessor/PpTokens.cpp",
        "glslang/MachineIndependent/propagateNoContraction.cpp",
        "glslang/MachineIndependent/reflection.cpp",
        "glslang/MachineIndependent/RemoveTree.cpp",
        "glslang/MachineIndependent/Scan.cpp",
        "glslang/MachineIndependent/ShaderLang.cpp",
        "glslang/MachineIndependent/SpirvIntrinsics.cpp",
        "glslang/MachineIndependent/SymbolTable.cpp",
        "glslang/MachineIndependent/Versions.cpp",
        "glslang/ResourceLimits/ResourceLimits.cpp",
        "SPIRV/disassemble.cpp",
        "SPIRV/doc.cpp",
        "SPIRV/GlslangToSpv.cpp",
        "SPIRV/InReadableOrder.cpp",
        "SPIRV/Logger.cpp",
        "SPIRV/SpvBuilder.cpp",
        "SPIRV/SpvPostProcess.cpp",
        "SPIRV/SPVRemapper.cpp",
        "SPIRV/SpvTools.cpp",
        "External/spirv-tools/source/util/string_utils.cpp",
        "External/spirv-tools/source/util/bit_vector.cpp",
        "External/spirv-tools/source/util/parse_number.cpp",
    ]

    if env["platform"] == "windows":
        thirdparty_sources.append("glslang/OSDependent/Windows/ossource.cpp")
    else:
        thirdparty_sources.append("glslang/OSDependent/Unix/ossource.cpp")

    opt_files =     [thirdparty_dir + "External/spirv-tools/source/opt/" + file for file in get_cpp_files("External/spirv-tools/source/opt/")]
    val_files =     [thirdparty_dir + "External/spirv-tools/source/val/" + file for file in get_cpp_files("External/spirv-tools/source/val/")]
    source_files =  [thirdparty_dir + "External/spirv-tools/source/" + file for file in get_cpp_files("External/spirv-tools/source/")]

    thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]
    thirdparty_sources += opt_files
    thirdparty_sources += val_files
    thirdparty_sources += source_files

    # Treat glslang headers as system headers to avoid raising warnings. Not supported on MSVC.
    # Include `#thirdparty` to workaround mismatch between location of `SPIRV` in library source
    # and in installed public headers.
    if not env.msvc:
        env_glslang.Append(CPPFLAGS=["-isystem", Dir(thirdparty_dir).path, "-isystem", Dir("#thirdparty").path])
        env_glslang.Append(CPPFLAGS=["-isystem", Dir(thirdparty_dir).path, "-isystem", Dir("#thirdparty/glslang/External/spirv-tools").path])
        env_glslang.Append(CPPFLAGS=["-isystem", Dir(thirdparty_dir).path, "-isystem", Dir("#thirdparty/glslang/SPIRV-Headers/spirv/unified1").path])
        env_glslang.Append(CPPFLAGS=["-isystem", Dir(thirdparty_dir).path, "-isystem", Dir("#thirdparty/glslang/SPIRV-Headers/").path])
        env_glslang.Append(CPPFLAGS=["-isystem", Dir(thirdparty_dir).path, "-isystem", Dir("#thirdparty/glslang/External/spirv-tools/include").path])
    else:
        env_glslang.Prepend(CPPPATH=[thirdparty_dir, "#thirdparty"])
        env_glslang.Prepend(CPPPATH=[thirdparty_dir, "#thirdparty/glslang/External/spirv-tools"])
        env_glslang.Prepend(CPPPATH=[thirdparty_dir, "#thirdparty/glslang/SPIRV-Headers/spirv/unified1"])
        env_glslang.Prepend(CPPPATH=[thirdparty_dir, "#thirdparty/glslang/SPIRV-Headers/"])
        env_glslang.Prepend(CPPPATH=[thirdparty_dir, "#thirdparty/glslang/External/spirv-tools/include"])

    env_glslang.Append(CPPDEFINES=["ENABLE_OPT=1"])

    env_thirdparty = env_glslang.Clone()
    env_thirdparty.disable_warnings()
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)
    env_thirdparty.Append(CPPDEFINES=["ENABLE_OPT=1"])
    env.Append(CPPDEFINES=["ENABLE_OPT=1"])
    env.modules_sources += thirdparty_obj


# Godot source files

module_obj = []

env_glslang.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
